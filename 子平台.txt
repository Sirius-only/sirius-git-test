<template>
  <div class="app-container">
    <div class="admin-container">
      <h2 class="admin-head">子平台管理</h2>
      <el-card class="box-card">
        <el-button type="primary" @click="openDialog()">添加子平台</el-button>
        <el-divider content-position="left">现有子平台列表</el-divider>
        <el-table v-loading="loading" :data="tableData" border>
          <el-table-column label="序号" type="index" width="80"></el-table-column>
          <el-table-column label="平台名称" prop="name" width="340"></el-table-column>
          <el-table-column label="平台地址" prop="url" width="340"></el-table-column>
          <el-table-column label="平台状态" prop="state" width="340">
            <template slot-scope="scope">
              <div v-if="scope.row.state == 1">启用</div>
              <div v-else>停用</div>
            </template>
          </el-table-column>
          <el-table-column label="平台标识色" prop="color" width="340">
            <template slot-scope="scope">
              <div class="color-item" :style="{backgroundColor:`${scope.row.color}`}"></div>
            </template>
          </el-table-column>
           <el-table-column label="子平台管理" prop="state" width="340">
           <template slot-scope="scope">
              <div v-if="scope.row.source == ''">---</div>
              <div v-if="scope.row.source == '1' ">研发网</div>
              <div v-if="scope.row.source == '2' ">管理网</div>
              <!-- <div v-else>管理网</div> -->
            </template>
          </el-table-column>
          <el-table-column fixed="right" label="操作" width="240">
            <template slot-scope="scope">
              <el-link type="primary" icon="el-icon-edit" @click="openDialog(scope.row)">编 辑</el-link>
              <el-link type="danger" icon="el-icon-delete" @click="deletePlatform(scope.row)">删 除</el-link>
            </template>
          </el-table-column>
        </el-table>
      </el-card>
      <!-- 查看弹出层 start-->
      <div v-if="dialogVisible">
        <el-dialog
          width="800px"
          title="添加子平台"
          :visible.sync="dialogVisible"
          :show-close="false"
          :close-on-click-modal="false"
          :close-on-press-escape="false"
        >
          <el-form :model="editForm" ref="editForm" :rules="rules" label-position="top">
            <el-form-item label="子平台名称" :required="true" prop="name">
              <el-input
                style=" display:inline-block"
                placeholder="请输入子平台名称"
                v-model="editForm.name"
              ></el-input>
            </el-form-item>
            <el-form-item label="子平台地址" :required="true" prop="url">
              <el-input type="textarea" v-model="editForm.url" autocomplete="off"></el-input>
            </el-form-item>
            <el-form-item label="自定义标签" :required="true" prop="label">
              <el-input type="textarea" v-model="editForm.label" autocomplete="off"></el-input>
            </el-form-item>

            <el-form-item label="子平台code(子平台唯一关联码)" :required="true" prop="code">
                  <el-input v-model="editForm.code" autocomplete="off"></el-input>
            </el-form-item>

            <el-form-item label="描述" :required="true" prop="introduce">
              <el-input :rows="8" type="textarea" v-model="editForm.introduce" autocomplete="off"></el-input>
            </el-form-item>

            <el-form-item label="子平台状态">
              <el-switch v-model="editForm.state"></el-switch>
            </el-form-item>
            <el-form-item label="子平台管理">
                <el-radio v-model="editForm.source" label="1">研发网</el-radio>
                <el-radio v-model="editForm.source" label="2">管理网</el-radio>
            </el-form-item>
            <el-form-item label="子平台标识色(请尽量保证每个平台颜色不同,以用来区分)" prop="color">
              <el-color-picker v-model="editForm.color"></el-color-picker>
            </el-form-item>
          </el-form>
          <div slot="footer" class="dialog-footer">
            <el-button :loading="loading" type="primary" @click="save()">保 存</el-button>
            <el-button :loading="loading" @click="dialogVisible = false">关 闭</el-button>
          </div>
        </el-dialog>
      </div>
      <!-- 查看弹出层 end-->
    </div>
  </div>
</template>

<script>
import {
  // platFormList,
  platFormListPage,
  savePlatForm,
  deletePlatform,
  updatePlatForm
} from "@/api/admin/platform";
export default {
  data() {
    return {
      loading: false,
      dialogVisible: false,
      tableData: [],
      editForm: {
        source:"",
        // state: " 启用"
      },
      options: [
        {
          label: "启用",
          value: 0
        },
        {
          label: "停用",
          value: 1
        }
      ],
      loading: false,
      rules: {
        name: [
          { required: true, message: "请填写子平台名称", trigger: "blur" },
          { min: 3, max: 15, message: "长度在 3 到 15 个字符", trigger: "blur" }
        ],
        url: [{ required: true, message: "请填写子平台地址", trigger: "blur" }],
        code: [
          { required: true, message: "请填写子平台code", trigger: "blur" }
        ],
        label: [
          { required: true, message: "请填写自定义标签", trigger: "blur" }
        ],
        introduce: [{ required: true, message: "请填写描述", trigger: "blur" }],
        state: [{ required: true, message: "请选择状态", trigger: "blur" }],
        source: [{required: true, message: "子平台系统", trigger: "blur"}],
        color: [
          { required: true, message: "请选择子平台标识色", trigger: "change" }
        ]
      }
    };
  },
  created() {
    this.getPlatFormList();
  },
  methods: {
    openDialog(data) {
      if (data) {
        this.editForm = JSON.parse(JSON.stringify(data));
      } else {
        this.editForm = {};
      }
      this.dialogVisible = true;
    },
    async save() {
      this.$refs["editForm"].validate(async valid => {
        if (valid) {
          this.loading = true;
          if (this.editForm.id) {
            try {
              let _form = Object.assign({}, this.editForm);
              _form.state = _form.state ? 0 : 1;
              let res = await updatePlatForm(_form);
              this.dialogVisible = false;
              this.loading = false;
              this.getPlatFormList();
            } catch (e) {
              this.$message.error(e.message);
              this.dialogVisible = false;
              this.loading = false;
            }
          } else {
            try {
              if (this.editForm.state) {
                this.editForm.state = 0;
              } else {
                this.editForm.state = 1;
              }
               if (this.editForm.source) {
                this.editForm.source = 2;
              } else {
                this.editForm.source = 1;
              }
              let res = await savePlatForm(this.editForm);
              this.dialogVisible = false;
              this.loading = false;
              this.getPlatFormList();
            } catch (e) {
              this.$message.error(e.message);
              this.dialogVisible = false;
              this.loading = false;
            }
          }
        }
      });
    },
    deletePlatform(data) {
      this.$confirm("此操作将永久删除该子平台信息, 是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(async () => {
          try {
            let res = await deletePlatform({ id: data.id });
            this.$message({
              type: "success",
              message: "删除成功!"
            });
            this.getPlatFormList();
          } catch (e) {
            this.$message({
              type: "error",
              message: "删除失败!"
            });
          }
        })
        .catch(() => {});
    },
    async getPlatFormList() {
      try {
        this.loading = true;
        let res = await platFormListPage({ page: 1, pageSize: 10 });
        this.tableData = res.rows;
        this.tableData.map(item => {
          item.state = !item.state;
          return item;
        });
        this.loading = false;
      } catch (error) {
        this.loading = false;
      }
    }
  }
};
</script>

<style lang="scss" scoped>
@import "@/scss/admin.scss";
.color-item {
  width: 10px;
  height: 10px;
  border-radius: 50%;
}
</style>